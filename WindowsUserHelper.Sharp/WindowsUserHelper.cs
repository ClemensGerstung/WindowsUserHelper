// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace WindowsUserHelper.Sharp.Intern
{
    namespace User
    {
        namespace Process
        {
            public unsafe partial class UserHelper
            {
                public partial struct __Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("WindowsUserHelper", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?GetUserNameByToken@process@user@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBQEAX@Z")]
                    internal static extern void GetUserNameByToken(global::System.IntPtr @return, void** token);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("WindowsUserHelper", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?GetCurrentProcessUser@process@user@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ")]
                    internal static extern void GetCurrentProcessUser(global::System.IntPtr @return);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("WindowsUserHelper", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?GetCurrentThreadUser@process@user@@YA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z")]
                    internal static extern void GetCurrentThreadUser(global::System.IntPtr @return, int isImpersonating);
                }

                public static string GetUserNameByToken(global::System.IntPtr token)
                {
                    var __token0 = (void*) token;
                    var __arg0 = &__token0;
                    var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.GetUserNameByToken(new IntPtr(&__ret), __arg0);
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }

                public static string GetCurrentProcessUser()
                {
                    var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.GetCurrentProcessUser(new IntPtr(&__ret));
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }

                public static string GetCurrentThreadUser(int isImpersonating)
                {
                    var __ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                    __Internal.GetCurrentThreadUser(new IntPtr(&__ret), isImpersonating);
                    var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new global::System.IntPtr(&__ret));
                    var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
                    __basicStringRet0.Dispose();
                    return __retString0;
                }
            }
        }

        namespace Impersonate
        {
            public unsafe partial class UserHelper
            {
                public partial struct __Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("WindowsUserHelper", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="?ImpersonateUser@impersonate@user@@YA?BHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0PEAPEAX@Z")]
                    internal static extern int ImpersonateUser(global::System.IntPtr message, global::System.IntPtr caption, void** userHandle);
                }

                public static int ImpersonateUser(string message, string caption, void** userHandle)
                {
                    var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                    global::Std.BasicStringExtensions.Assign(__basicString0, message);
                    var __arg0 = __basicString0.__Instance;
                    var __basicString1 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
                    global::Std.BasicStringExtensions.Assign(__basicString1, caption);
                    var __arg1 = __basicString1.__Instance;
                    var __ret = __Internal.ImpersonateUser(__arg0, __arg1, userHandle);
                    __basicString0.Dispose();
                    __basicString1.Dispose();
                    return __ret;
                }
            }
        }
    }
}
